all:

# To be filled in by included makefiles
TARGETS =
BINARIES =
DOCS =

# Build compiler flags
ifdef RELEASE
	CFLAGS += -O2
else
	CFLAGS += -ggdb3 -O0 -DDEBUG
endif
ifeq ($(TARGET),mips)
	CC = mips-softfloat-linux-uclibc-gcc
endif
ifdef STATIC
	CFLAGS += -static -DSTATIC
	LDFLAGS += -static
endif
CFLAGS_ALL += $(CFLAGS) --std=gnu99 -pedantic -Wall -Wextra -DOUTPUT_DIRECTORY=$(abspath $(O)) -DSOURCE_DIRECTORY=$(abspath $(S)) -DPAGE_SIZE=$(PAGE_SIZE) -DPREFIX=$(abspath $(O))
LDFLAGS_ALL += $(LDFLAGS)

# Magic to track dependencies on header files. They are stored in the .d files
# by the compiler, then we load them on the next run and use them.
DEP_FILES := $(shell if test -d $(O)/.deps ; then find $(O)/.deps -name '*.d' ; fi | sort)
include $(DEP_FILES)

# Stuff to generate dependencies and link commands from the target_SOMETHING variables.
ifdef STATIC
LIB_SUFFIX :=.a
else
LIB_SUFFIX :=.so
endif

define COMMON_REGISTER
$(1): $$(patsubst %,$(O)/.objs/$(3)%.o,$$($(2)_MODULES))
$(1): CFLAGS_ALL += $$($(2)_CFLAGS)
$(1): LDFLAGS_ALL += $$($(2)_LDFLAGS)
ifdef STATIC
TODO: Static linking
else
$(1): LINK_LIBRARIES += -L$(O)/lib -Wl,-R$(abspath $(O)/lib) $$(addprefix -l,$$($(2)_LOCAL_LIBS) $$($(2)_SYSTEM_LIBS))
$(1): $$(patsubst %,$(O)/lib/lib%.so,$$($(2)_LOCAL_LIBS))
endif
endef

# Function to register a binary to TARGETS and generate the rules to build it.
# It shall be called as:
#
# binary_name_MODULES := main other_file third_file
# $(eval $(call REGISTER_BIN,binary_name,src/path/to/directory))
define REGISTER_BIN
ifneq (,$(findstring ^$(RESTRICT),^$(1)))
TARGETS += $(O)/$(1)
endif
$(call COMMON_REGISTER,$(O)/bin/$$(notdir $(1)),$$(notdir $(1)),$$(dir $(1)))
$(O)/$(1): $(O)/bin/$$(notdir $(1))
	mkdir -p $$(dir $(O)/$(1))
	ln -sf $$(abspath $$<) $$@
endef

# Similar, for libraries
define REGISTER_LIB
ifneq (,$(findstring ^$(RESTRICT),^$(1)))
TARGETS += $(O)/$(1)$(LIB_SUFFIX)
endif
$(call COMMON_REGISTER,$(O)/lib/$$(notdir $(1)).a,$$(notdir $(1)),$$(dir $(1)))
$(call COMMON_REGISTER,$(O)/lib/$$(notdir $(1)).so,$$(notdir $(1)),$$(dir $(1)))
$(O)/$(1).a: $(O)/lib/$$(notdir $(1)).a
	mkdir -p $$(dir $(O)/$(1))
	ln -sf $$(abspath $$<) $$@
$(O)/$(1).so: $(O)/lib/$$(notdir $(1)).so
	mkdir -p $$(dir $(O)/$(1))
	ln -sf $$(abspath $$<) $$@
endef

# Similar, for documentation
define REGISTER_DOC
ifneq (,$(findstring ^$(RESTRICT),^$(1)))
TARGETS += $(O)/$(1).html
endif
$(O)/docs/$$(notdir $(1)).html: $(S)/$$(addsuffix .txt,$(1))
$(O)/$(1).html: $(O)/docs/$$(notdir $(1)).html
	mkdir -p $$(dir $(O)/$(1))
	ln -sf $$(abspath $$<) $$@
endef

# Generic rules to compile and link
$(O)/.objs/%.o: $(S)/%.c
	mkdir -p $(dir $@ $(subst .objs/,.deps/,$@))
	$(CC) $(CFLAGS_ALL) -c $< -o $@ -MD -MF $(patsubst %.o,%.pre,$(subst .objs/,.deps/,$@))
	$(S)/build/normalize_dep_file.pl $(O) $(patsubst %.o,%.pre,$(subst .objs/,.deps/,$@)) >$(patsubst %.o,%.d,$(subst .objs/,.deps/,$@))

$(O)/bin/%:
	mkdir -p $(dir $@)
	$(CC) $(LDFLAGS_ALL) $(LINK_LIBRARIES) $(filter %.o,$^) -o $@

$(O)/lib/%.a:
	mkdir -p $(dir $@)
	$(AR) -rc $@ $(filter %.o,$^)

$(O)/lib/%.so: CFLAGS_ALL += -fPIC
$(O)/lib/%.so:
	mkdir -p $(dir $@)
	$(CC) $(LDFLAGS_ALL) -shared -o $@ $(filter %.o,$^)

$(O)/docs/%:
	mkdir -p $(dir $@)
	$(ASCIIDOC) -o $@ $<
