The uplink protocol
===================

The protocol is simple binary protocol. It is binary mostly because it
is easier to handle fixed-length binary blocks in C than
variable-length textual data.

The protocol consists of messages. Each message is a block of data,
preceded by 4-byte network-order number of bytes of the message. The
4 bytes of length are not themselves counted into the length. As an
empty message is not allowed, the smallest value of the length is
therefore 1.

The message starts by single byte, specifying the type of message. The
value of the byte for each type of message is chosen that if printed
as character (not a number), the letter reminds of the type name (it
is usually a significant letter of the name).

The type is then followed by more data, while the format and length is
specific to the type. However, the format of the data still follows
similar rules. Each variable-length block is preceded by 4-byte length
in network byte order, and the 4-byte number is not included in the
length. Strings are considered to be variable-length blocks, and the
trailing `\0` is not included. Therefore, string `Hello world` would
be encoded as:

  [0, 0, 0, 11, 'H', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd']

Messages from the client
------------------------

The client sends the following messages.

Hello::
  Denoted as `H` in the wire format. It is sent right after
  authenticating. It carries single 8-bit number, which is the protocol
  version. Current protocol version is 1. Previously, no version was
  sent, which meant the original protocol currently referred as 0.
Route data from plugin::
  It is denoted by `R`. The message sends some plugin-specific data
  from a plugin. It is usually sent by the
  `uplink_plugin_send_message`. The `R` is followed by single string,
  which is the name of the plugin. The rest of the data is the actual
  payload.
Error::
  Denoted by `E`. It is then followed by yet another single byte
  specifier. The byte specifies which error it is.
Ping::
  Denoted by `P`. Request to answer. It is sent repeatedly, to verify
  the link is alive. If too many pings are not answered, the client
  reconnects.  Any data can be bundled with the command and the server
  would just echo them back in the reply.
Pong::
  Response to ``Ping''. It should copy data from the ping command and
  send them back. Denoted by `p`.
List of plugins::
  Denoted by `V`, it sends list of plugins curretly loaded in the
  client, together with their versions. It is followed by bunch of
  tuples (plugin name, plugin protocol version, hash, activity).
  Plugin name is a string and the version is a 2-byte number. The hash
  is the first 16 bytes of sha256 of the plugin's `.so` library. The
  activity is single character, either `A` as active plugin, or `I` as
  inactive plugin.  It is sent after authentication (after the hello
  message) and each time any of this information changes (plugins are
  loaded or unloaded, some are activated, etc).

Error codes from the client
---------------------------

Plugin doesn't exist::
  Encoded as `P`. It is followed by the name of module. This error is
  sent when some message from the server references a module that is
  not active in the client.
Plugin can't be activated or deactivate::
  It is encoded as `A`. It is then followed by a string and the first
  16 bytes of sha256 hash. These are the name and the hash of the plugin
  to be activated or deactivated. This is sent when the client doesn't
  contain a matching plugin. This might be caused by a race condition
  between the server and the client as well by a code bug.

Messages from the server
------------------------

Route data to plugin::
  It is denoted by `R` and it is the counterpart of the ``Route data
  from plugin'' message from client. It is encoded in the same way and
  the payload is then passed to the plugin's `uplink_data_callback` or
  a ``Plugin doesn't exist'' error is sent back to the server if such
  plugin isn't loaded.
Ping::
  Same as with client.
Pong::
  Same as with client.
Activate plugins::
  It is prefixed by `A`. It carries a list of plugins to activate or
  deactivate. It starts with a single 4-byte integer, the count of
  the plugins to process. Each plugin is then a tuple (name, hash,
  activation). Name is the name of the plugin, represented as a string. Hash
  is the first 16 bytes of the plugin `.so` library sha1 sum as sent
  in the list of plugins by client. Activation is either `A` or `I`,
  with the same meaning as in the list of plugins command. If any
  plugins are activated or deactivated, the client responds by the
  list of plugins command. If there's nothing to change (the plugins
  referenced either don't exist or are already in the requested
  state), the list of plugins command is not resent.

Authentication phase
--------------------

Before the normal communication starts, the client needs to
authenticate (the server is authenticated by a TLS certificate in the
encryption layer). They have a shared secret (actually, two, one is in
the atsha204 chip, the other is compiled into the library). The server
sends a challenge, prefixed by a `C` opcode (the whole payload is the
challenge). The client computes a response by doing some HMAC-sha256
magic with the challenge and the shared secrets. It then sends a
message with prefix `LO` (`L` for `login` and `O` is the type of hash
used), then two strings â€’ the client's login name (serial number) and
the response computed. Client directly follows by sending the Hello
message from the above list and expects to be connected.

The server either authenticates the client, or sends an `F` message,
which means the login failed.

Any of the above commands from above are forbidden before the
authentication step is complete.
