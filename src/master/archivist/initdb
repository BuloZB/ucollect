#!/bin/sh

psql -U turris_db_admin -d turris -h localhost <<'END_SQL'
BEGIN;

DROP TABLE IF EXISTS anomalies;
DROP TABLE IF EXISTS anomaly_types;
DROP TABLE IF EXISTS counts;
DROP TABLE IF EXISTS count_snapshots;
DROP TABLE IF EXISTS count_types;
DROP TABLE IF EXISTS firewall_groups;
DROP TABLE IF EXISTS firewall_packets;
DROP TABLE IF EXISTS groups;
DROP TABLE IF EXISTS ping_ips;
DROP TABLE IF EXISTS ping_stats;
DROP TABLE IF EXISTS ping_requests;

CREATE TABLE groups (
	id INT PRIMARY KEY NOT NULL,
	name TEXT NOT NULL,
	UNIQUE (name)
);

CREATE TABLE anomaly_types (
	code CHAR PRIMARY KEY NOT NULL,
	description TEXT NOT NULL
);
CREATE TABLE anomalies (
	from_group INT NOT NULL,
	type CHAR NOT NULL,
	timestamp TIMESTAMP NOT NULL,
	value TEXT NOT NULL,
	relevance_count SMALLINT NOT NULL,
	relevance_of SMALLINT NOT NULL,
	strength REAL DEFAULT 0,
	FOREIGN KEY (from_group) REFERENCES groups(id),
	FOREIGN KEY (type) REFERENCES anomaly_types(code),
	CHECK(relevance_count <= relevance_of)
);
CREATE INDEX ON anomalies (from_group, type, timestamp);
CREATE INDEX ON anomalies (timestamp);

CREATE TABLE count_types (
	name TEXT UNIQUE NOT NULL,
	description TEXT NOT NULL,
	ord SMALLINT PRIMARY KEY NOT NULL,
	UNIQUE (ord)
);
CREATE TABLE count_snapshots (
	id BIGINT PRIMARY KEY NOT NULL,
	timestamp TIMESTAMP NOT NULL,
	from_group INT NOT NULL,
	FOREIGN KEY (from_group) REFERENCES groups(id),
	UNIQUE (timestamp, from_group)
);
CREATE SEQUENCE count_snapshots_id OWNED BY count_snapshots.id;
CREATE INDEX ON count_snapshots (timestamp);
ALTER TABLE count_snapshots ALTER COLUMN id SET DEFAULT NEXTVAL('count_snapshots_id');

CREATE TABLE counts (
	snapshot BIGINT NOT NULL,
	type SMALLINT NOT NULL,
	client_count INT NOT NULL,
	count_sum BIGINT NOT NULL,
	count_avg DOUBLE PRECISION NOT NULL,
	count_dev DOUBLE PRECISION,
	count_min BIGINT NOT NULL,
	count_max BIGINT NOT NULL,
	size_sum BIGINT NOT NULL,
	size_avg DOUBLE PRECISION NOT NULL,
	size_dev DOUBLE PRECISION,
	size_min BIGINT NOT NULL,
	size_max BIGINT NOT NULL,
	FOREIGN KEY (snapshot) REFERENCES count_snapshots(id) ON DELETE CASCADE,
	FOREIGN KEY (type) REFERENCES count_types(ord),
	CHECK(client_count > 0),
	CHECK(count_sum >= 0),
	CHECK(count_avg >= 0),
	CHECK(count_min >= 0),
	CHECK(count_max >= count_min),
	CHECK(size_sum >= 0),
	CHECK(size_avg >= 0),
	CHECK(size_min >= 0),
	CHECK(size_max >= size_min),
	UNIQUE (snapshot, type)
);

CREATE TABLE firewall_packets (
	id BIGINT PRIMARY KEY NOT NULL,
	rule_id INTEGER,
	time TIMESTAMP WITH TIME ZONE NOT NULL,
	direction CHAR NOT NULL,
	port_loc INTEGER,
	port_rem INTEGER,
	addr_rem INET NOT NULL,
	protocol VARCHAR(10),
	count INTEGER NOT NULL
	CHECK(port_loc >= 0),
	CHECK(port_rem >= 0),
	CHECK(count >= 0),
	CHECK(rule_id >= 0)
);
CREATE SEQUENCE firewall_packets_id OWNED BY firewall_packets.id;
ALTER TABLE firewall_packets ALTER COLUMN id SET DEFAULT NEXTVAL('firewall_packets_id');
CREATE TABLE firewall_groups (
	packet BIGINT NOT NULL,
	for_group INTEGER NOT NULL,
	FOREIGN KEY (packet) REFERENCES firewall_packets(id) ON DELETE CASCADE,
	FOREIGN KEY (for_group) REFERENCES groups(id) ON DELETE CASCADE,
	UNIQUE (packet, for_group)
);

CREATE TABLE activity_types (
	id SMALLINT PRIMARY KEY,
	name TEXT NOT NULL
);
CREATE TABLE clients (
	id INTEGER PRIMARY KEY,
	name TEXT NOT NULL
);
CREATE TABLE activities (
	date DATE NOT NULL,
	activity SMALLINT NOT NULL,
	client INTEGER NOT NULL,
	count SMALLINT NOT NULL,
	FOREIGN KEY (activity) REFERENCES activity_types(id) ON DELETE CASCADE,
	FOREIGN KEY (client) REFERENCES clients(id) ON DELETE CASCADE,
	CHECK(count >= 0)
);

CREATE TABLE ping_requests (
	id INT PRIMARY KEY NOT NULL,
	host TEXT NOT NULL,
	proto CHAR(1) NOT NULL,
	amount SMALLINT NOT NULL,
	size SMALLINT NOT NULL,
	UNIQUE(host, proto, amount, size)
);
CREATE TABLE ping_stats (
	id BIGINT PRIMARY KEY NOT NULL,
	batch TIMESTAMP NOT NULL,
	request INT NOT NULL,
	from_group INT NOT NULL,
	sent SMALLINT NOT NULL,
	received SMALLINT NOT NULL,
	asked SMALLINT NOT NULL,
	resolved SMALLINT NOT NULL,
	min INT,
	max INT,
	avg INT,
	FOREIGN KEY (request) REFERENCES ping_requests(id) ON DELETE CASCADE,
	FOREIGN KEY (from_group) REFERENCES groups(id) ON DELETE CASCADE,
	UNIQUE(batch, request, from_group),
	CHECK(received <= sent),
	CHECK(resolved <= asked),
	CHECK(min <= max),
	CHECK(min <= avg),
	CHECK(avg <= max)
);
CREATE SEQUENCE ping_stats_id OWNED BY ping_stats.id;
ALTER TABLE ping_stats ALTER COLUMN id SET DEFAULT NEXTVAL('ping_stats_id');
CREATE TABLE ping_ips (
	ping_stat BIGINT NOT NULL,
	ip TEXT,
	count SMALLINT NOT NULL,
	FOREIGN KEY (ping_stat) REFERENCES ping_stats(id) ON DELETE CASCADE,
	UNIQUE(ping_stat, ip)
);

CREATE TABLE cert_requests (
	id INT PRIMARY KEY NOT NULL,
	host TEXT NOT NULL,
	port INT NOT NULL,
	starttls SMALLINT NOT NULL,
	want_cert BOOL NOT NULL,
	want_chain BOOL NOT NULL,
	want_details BOOL NOT NULL,
	want_params BOOL NOT NULL
);
CREATE TABLE cert_histograms (
	batch TIMESTAMP NOT NULL,
	request INT NOT NULL,
	from_group INT NOT NULL,
	cert TEXT NOT NULL,
	count SMALLINT NOT NULL,
	UNIQUE(batch, request, from_group),
	FOREIGN KEY (request) REFERENCES cert_requests(id) ON DELETE CASCADE,
	FOREIGN KEY (from_group) REFERENCES groups(id) ON DELETE CASCADE
);

GRANT INSERT ON anomalies TO archivist;
GRANT SELECT (timestamp) ON anomalies TO archivist;
GRANT INSERT ON anomaly_types TO archivist;
GRANT SELECT ON anomaly_types TO archivist;
GRANT INSERT ON counts TO archivist;
GRANT INSERT ON count_types TO archivist;
GRANT SELECT ON count_types TO archivist;
GRANT INSERT ON count_snapshots TO archivist;
GRANT SELECT (timestamp) ON count_snapshots TO archivist;
GRANT INSERT ON groups TO archivist;
GRANT SELECT ON groups TO archivist;
GRANT ALL ON count_snapshots_id TO archivist;
GRANT INSERT ON firewall_packets TO archivist;
GRANT ALL ON firewall_packets_id TO archivist;
GRANT INSERT ON firewall_groups TO archivist;
GRANT INSERT ON activity_types TO archivist;
GRANT SELECT ON activity_types TO archivist;
GRANT INSERT ON clients TO archivist;
GRANT SELECT ON clients TO archivist;
GRANT SELECT (date) ON activities TO archivist;
GRANT INSERT ON activities TO archivist;
GRANT DELETE ON activities TO archivist;
GRANT SELECT ON ping_requests TO archivist;
GRANT INSERT ON ping_requests TO archivist;
GRANT SELECT (batch, request, from_group, id) ON ping_stats TO archivist;
GRANT DELETE ON ping_stats TO archivist;
GRANT INSERT ON ping_stats TO archivist;
GRANT ALL ON ping_stat_id TO archivist;
GRANT INSERT ON ping_ips TO archivist;
GRANT INSERT ON cert_requests TO archivist;
GRANT SELECT ON cert_requests TO archivist;
GRANT INSERT ON cert_histograms TO archivist;
GRANT DELETE ON cert_histograms TO archivist;
GRANT SELECT (batch, id) ON cert_histograms TO archivist;
COMMIT;
END_SQL
