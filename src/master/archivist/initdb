#!/bin/sh

psql -U turris_db_admin -d turris -h localhost <<'END_SQL'
BEGIN;

DROP TABLE IF EXISTS fake_attackers;
DROP TABLE IF EXISTS fake_server_activity;
DROP TABLE IF EXISTS fake_passwords;
DROP TABLE IF EXISTS ssh_commands;
DROP TABLE IF EXISTS ssh_sessions;
DROP TABLE IF EXISTS refused_clients;
DROP TABLE IF EXISTS refused_addrs;
DROP TABLE IF EXISTS spoof_counts;
DROP TABLE IF EXISTS nat_counts;
DROP TABLE IF EXISTS biflow_groups;
DROP TABLE IF EXISTS biflows;
DROP TABLE IF EXISTS bandwidth;
DROP TABLE IF EXISTS bandwidth_avg;
DROP TABLE IF EXISTS bandwidth_sums;
DROP TABLE IF EXISTS cert_histograms;
DROP TABLE IF EXISTS cert_requests;
DROP TABLE IF EXISTS anomalies;
DROP TABLE IF EXISTS anomaly_types;
DROP TABLE IF EXISTS counts;
DROP TABLE IF EXISTS count_snapshots;
DROP TABLE IF EXISTS count_types;
DROP TABLE IF EXISTS firewall_groups;
DROP TABLE IF EXISTS firewall_packets;
DROP TABLE IF EXISTS groups;
DROP TABLE IF EXISTS ping_ips;
DROP TABLE IF EXISTS ping_stats;
DROP TABLE IF EXISTS ping_requests;
DROP TYPE IF EXISTS fake_server;

CREATE TABLE groups (
	id INT PRIMARY KEY NOT NULL,
	name TEXT NOT NULL,
	UNIQUE (name)
);

CREATE TABLE anomaly_types (
	code CHAR PRIMARY KEY NOT NULL,
	description TEXT NOT NULL
);
CREATE TABLE anomalies (
	from_group INT NOT NULL,
	type CHAR NOT NULL,
	timestamp TIMESTAMP NOT NULL,
	value TEXT NOT NULL,
	relevance_count SMALLINT NOT NULL,
	relevance_of SMALLINT NOT NULL,
	strength REAL DEFAULT 0,
	FOREIGN KEY (from_group) REFERENCES groups(id),
	FOREIGN KEY (type) REFERENCES anomaly_types(code),
	CHECK(relevance_count <= relevance_of)
);
CREATE INDEX ON anomalies (from_group, type, timestamp);
CREATE INDEX ON anomalies (timestamp);

CREATE TABLE count_types (
	name TEXT UNIQUE NOT NULL,
	description TEXT NOT NULL,
	ord SMALLINT PRIMARY KEY NOT NULL,
	UNIQUE (ord)
);
CREATE TABLE count_snapshots (
	id BIGINT PRIMARY KEY NOT NULL,
	timestamp TIMESTAMP NOT NULL,
	from_group INT NOT NULL,
	FOREIGN KEY (from_group) REFERENCES groups(id),
	UNIQUE (timestamp, from_group)
);
CREATE SEQUENCE count_snapshots_id OWNED BY count_snapshots.id;
CREATE INDEX ON count_snapshots (timestamp);
ALTER TABLE count_snapshots ALTER COLUMN id SET DEFAULT NEXTVAL('count_snapshots_id');

CREATE TABLE counts (
	snapshot BIGINT NOT NULL,
	type SMALLINT NOT NULL,
	client_count INT NOT NULL,
	count_sum BIGINT NOT NULL,
	count_avg DOUBLE PRECISION NOT NULL,
	count_dev DOUBLE PRECISION,
	count_min BIGINT NOT NULL,
	count_max BIGINT NOT NULL,
	size_sum BIGINT NOT NULL,
	size_avg DOUBLE PRECISION NOT NULL,
	size_dev DOUBLE PRECISION,
	size_min BIGINT NOT NULL,
	size_max BIGINT NOT NULL,
	FOREIGN KEY (snapshot) REFERENCES count_snapshots(id) ON DELETE CASCADE,
	FOREIGN KEY (type) REFERENCES count_types(ord),
	CHECK(client_count > 0),
	CHECK(count_sum >= 0),
	CHECK(count_avg >= 0),
	CHECK(count_min >= 0),
	CHECK(count_max >= count_min),
	CHECK(size_sum >= 0),
	CHECK(size_avg >= 0),
	CHECK(size_min >= 0),
	CHECK(size_max >= size_min),
	UNIQUE (snapshot, type)
);

CREATE TABLE firewall_packets (
	id BIGINT PRIMARY KEY NOT NULL,
	rule_id INTEGER,
	time TIMESTAMP WITH TIME ZONE NOT NULL,
	direction CHAR NOT NULL,
	port_loc INTEGER,
	port_rem INTEGER,
	addr_rem INET NOT NULL,
	protocol VARCHAR(10),
	count INTEGER NOT NULL,
	tcp_flags SMALLINT,
	CHECK(port_loc >= 0),
	CHECK(port_rem >= 0),
	CHECK(count >= 0),
	CHECK(rule_id >= 0)
);
CREATE SEQUENCE firewall_packets_id OWNED BY firewall_packets.id;
ALTER TABLE firewall_packets ALTER COLUMN id SET DEFAULT NEXTVAL('firewall_packets_id');
CREATE INDEX firewall_time ON firewall_packets(time);
CREATE TABLE firewall_groups (
	packet BIGINT NOT NULL,
	for_group INTEGER NOT NULL,
	FOREIGN KEY (packet) REFERENCES firewall_packets(id) ON DELETE CASCADE,
	FOREIGN KEY (for_group) REFERENCES groups(id) ON DELETE CASCADE,
	UNIQUE (packet, for_group)
);

CREATE TABLE activity_types (
	id SMALLINT PRIMARY KEY,
	name TEXT NOT NULL
);
CREATE TABLE clients (
	id INTEGER PRIMARY KEY,
	name TEXT NOT NULL
);
CREATE TABLE activities (
	date DATE NOT NULL,
	activity SMALLINT NOT NULL,
	client INTEGER NOT NULL,
	count INTEGER NOT NULL,
	FOREIGN KEY (activity) REFERENCES activity_types(id) ON DELETE CASCADE,
	FOREIGN KEY (client) REFERENCES clients(id) ON DELETE CASCADE,
	CHECK(count >= 0)
);

CREATE TABLE ping_requests (
	id INT PRIMARY KEY NOT NULL,
	host TEXT NOT NULL,
	proto CHAR(1) NOT NULL,
	amount SMALLINT NOT NULL,
	size SMALLINT NOT NULL,
	UNIQUE(host, proto, amount, size)
);
CREATE TABLE ping_stats (
	id BIGINT PRIMARY KEY NOT NULL,
	batch TIMESTAMP NOT NULL,
	request INT NOT NULL,
	from_group INT NOT NULL,
	sent SMALLINT NOT NULL,
	received SMALLINT NOT NULL,
	asked SMALLINT NOT NULL,
	resolved SMALLINT NOT NULL,
	min INT,
	max INT,
	avg INT,
	FOREIGN KEY (request) REFERENCES ping_requests(id) ON DELETE CASCADE,
	FOREIGN KEY (from_group) REFERENCES groups(id) ON DELETE CASCADE,
	UNIQUE(batch, request, from_group),
	CHECK(received <= sent),
	CHECK(resolved <= asked),
	CHECK(min <= max),
	CHECK(min <= avg),
	CHECK(avg <= max)
);
CREATE SEQUENCE ping_stats_id OWNED BY ping_stats.id;
ALTER TABLE ping_stats ALTER COLUMN id SET DEFAULT NEXTVAL('ping_stats_id');
CREATE TABLE ping_ips (
	ping_stat BIGINT NOT NULL,
	ip TEXT,
	count SMALLINT NOT NULL,
	FOREIGN KEY (ping_stat) REFERENCES ping_stats(id) ON DELETE CASCADE,
	UNIQUE(ping_stat, ip)
);

CREATE TABLE cert_requests (
	id INT PRIMARY KEY NOT NULL,
	host TEXT NOT NULL,
	port INT NOT NULL,
	starttls SMALLINT NOT NULL,
	want_cert BOOL NOT NULL,
	want_chain BOOL NOT NULL,
	want_details BOOL NOT NULL,
	want_params BOOL NOT NULL
);
CREATE TABLE cert_histograms (
	batch TIMESTAMP NOT NULL,
	request INT NOT NULL,
	from_group INT NOT NULL,
	cert TEXT NOT NULL,
	count SMALLINT NOT NULL,
	UNIQUE(batch, request, from_group, cert),
	FOREIGN KEY (request) REFERENCES cert_requests(id) ON DELETE CASCADE,
	FOREIGN KEY (from_group) REFERENCES groups(id) ON DELETE CASCADE
);

CREATE TABLE bandwidth (
	timestamp TIMESTAMP NOT NULL,
	from_group INT NOT NULL,
	win_len INT NOT NULL,
	in_min DOUBLE PRECISION NOT NULL,
	out_min DOUBLE PRECISION NOT NULL,
	in_max DOUBLE PRECISION NOT NULL,
	out_max DOUBLE PRECISION NOT NULL,
	in_avg DOUBLE PRECISION NOT NULL,
	out_avg DOUBLE PRECISION NOT NULL,
	in_var DOUBLE PRECISION NOT NULL,
	out_var DOUBLE PRECISION NOT NULL,
	UNIQUE(timestamp, from_group, win_len),
	FOREIGN KEY (from_group) REFERENCES groups(id) ON DELETE CASCADE
);

CREATE TABLE bandwidth_avg (
	timestamp TIMESTAMP NOT NULL,
	client INT NOT NULL,
	bps_in INT NOT NULL,
	bps_out INT NOT NULL,
	UNIQUE(timestamp, client),
	CHECK(bps_in >= 0),
	CHECK(bps_out >= 0)
);

CREATE TABLE bandwidth_sums (
	timestamp TIMESTAMP NOT NULL,
	from_group INT NOT NULL,
	client_count INT NOT NULL,
	in_time INT[] NOT NULL,
	out_time INT[] NOT NULL,
	in_bytes BIGINT[] NOT NULL,
	out_bytes BIGINT[] NOT NULL,
	UNIQUE(timestamp, from_group),
	FOREIGN KEY (from_group) REFERENCES groups(id)
);

CREATE TABLE biflows (
	id BIGINT PRIMARY KEY NOT NULL,
	ip_remote INET NOT NULL,
	port_remote INT NOT NULL,
	port_local INT,
	proto CHAR(1) NOT NULL,
	start_in TIMESTAMP,
	start_out TIMESTAMP,
	stop_in TIMESTAMP,
	stop_out TIMESTAMP,
	size_in BIGINT NOT NULL,
	size_out BIGINT NOT NULL,
	count_in INT NOT NULL,
	count_out INT NOT NULL,
	seen_start_in BOOL NOT NULL,
	seen_start_out BOOL NOT NULL,
	seen_end_in BOOL,
	seen_end_out BOOL,
	seen_rst BOOL,
	tag TEXT NOT NULL,
	tagged_on TIMESTAMP NOT NULL,
	CHECK(proto = 'T' OR proto = 'U'),
	CHECK(start_in <= stop_in),
	CHECK(start_out <= stop_out)
);
CREATE SEQUENCE biflow_ids OWNED BY biflows.id;
ALTER TABLE biflows ALTER COLUMN id SET DEFAULT NEXTVAL('biflow_ids');
CREATE INDEX ON biflows (tagged_on);
CREATE TABLE biflow_groups (
	biflow BIGINT NOT NULL,
	from_group INT NOT NULL,
	FOREIGN KEY (biflow) REFERENCES biflows(id),
	FOREIGN KEY (from_group) REFERENCES groups(id)
);

CREATE TABLE nat_counts (
	from_group INT NOT NULL,
	batch TIMESTAMP NOT NULL,
	v4direct SMALLINT NOT NULL,
	v4nat SMALLINT NOT NULL,
	v6direct SMALLINT NOT NULL,
	v6nat SMALLINT NOT NULL,
	total SMALLINT NOT NULL,
	UNIQUE(from_group, batch),
	FOREIGN KEY (from_group) REFERENCES groups(id) ON DELETE CASCADE
);

CREATE TABLE spoof_counts (
	from_group INT NOT NULL,
	batch TIMESTAMP NOT NULL,
	reachable SMALLINT NOT NULL,
	spoofable SMALLINT NOT NULL,
	UNIQUE(from_group, batch),
	FOREIGN KEY (from_group) REFERENCES groups(id) ON DELETE CASCADE
);

CREATE TABLE refused_clients (
	client INT NOT NULL,
	reason CHAR NOT NULL,
	since TIMESTAMP NOT NULL,
	until TIMESTAMP NOT NULL,
	count INT NOT NULL,
	FOREIGN KEY (client) REFERENCES clients(id) ON DELETE CASCADE,
	CHECK(since < until),
	UNIQUE(client, reason, since)
);

CREATE TABLE refused_addrs (
	addr INET NOT NULL,
	port INT NOT NULL,
	reason CHAR NOT NULL,
	since TIMESTAMP NOT NULL,
	until TIMESTAMP NOT NULL,
	conn_count INT NOT NULL,
	client_count INT NOT NULL,
	UNIQUE(addr, port, reason, since),
	CHECK(port < 65536),
	CHECK(port >= 0),
	CHECK(client_count <= conn_count)
);
CREATE INDEX ON refused_addrs(since);

CREATE TYPE fake_server AS ENUM ('telnet', 'http', 'telnet_alt', 'ssh_honey', 'http', 'squid_http_proxy', 'http_proxy', 'polipo_http_proxy');
CREATE TABLE fake_attackers (
	date DATE NOT NULL,
	server fake_server NOT NULL,
	remote INET NOT NULL,
	attempt_count INT NOT NULL,
	connect_count INT NOT NULL,
	UNIQUE(date, server, remote),
	CHECK(attempt_count >= 0),
	CHECK(connect_count >= 0)
);
CREATE TABLE fake_passwords (
	timestamp TIMESTAMP NOT NULL,
	server fake_server NOT NULL,
	remote INET NOT NULL,
	remote_port INT,
	name BYTEA NOT NULL,
	password BYTEA NOT NULL,
	CHECK(remote_port > 0),
	CHECK(remote_port <= 65535)
);
CREATE TABLE fake_server_activity (
	date DATE NOT NULL,
	server fake_server NOT NULL,
	client INT NOT NULL,
	attempt_count INT NOT NULL,
	connect_count INT NOT NULL,
	FOREIGN KEY (client) REFERENCES clients(id) ON DELETE CASCADE,
	UNIQUE(date, server, client),
	CHECK(attempt_count >= 0),
	CHECK(connect_count >= 0)
);

CREATE TABLE ssh_sessions (
	id INT NOT NULL PRIMARY KEY,
	start_time TIMESTAMP WITH TIME ZONE NOT NULL,
	end_time TIMESTAMP WITH TIME ZONE,
	login BYTEA NOT NULL,
	password BYTEA NOT NULL,
	remote INET,
	remote_port INT,
	UNIQUE(start_time, login, password),
	CHECK(remote_port > 0),
	CHECK(remote_port <= 65535)
);
CREATE SEQUENCE ssh_session_ids OWNED BY ssh_sessions.id;
ALTER TABLE ssh_sessions ALTER COLUMN id SET DEFAULT NEXTVAL('ssh_session_ids');

CREATE TABLE ssh_commands (
	session INT NOT NULL,
	timestamp TIMESTAMP WITH TIME ZONE NOT NULL,
	success BOOL NOT NULL,
	command BYTEA NOT NULL,
	FOREIGN KEY (session) REFERENCES ssh_sessions(id) ON DELETE CASCADE
);

GRANT INSERT ON anomalies TO archivist;
GRANT SELECT (timestamp) ON anomalies TO archivist;
GRANT INSERT ON anomaly_types TO archivist;
GRANT SELECT ON anomaly_types TO archivist;
GRANT INSERT ON counts TO archivist;
GRANT INSERT ON count_types TO archivist;
GRANT SELECT ON count_types TO archivist;
GRANT INSERT ON count_snapshots TO archivist;
GRANT SELECT (timestamp) ON count_snapshots TO archivist;
GRANT INSERT ON groups TO archivist;
GRANT SELECT ON groups TO archivist;
GRANT ALL ON count_snapshots_id TO archivist;
GRANT INSERT ON firewall_packets TO archivist;
GRANT ALL ON firewall_packets_id TO archivist;
GRANT SELECT (time) ON firewall_packets TO archivist;
GRANT INSERT ON firewall_groups TO archivist;
GRANT INSERT ON activity_types TO archivist;
GRANT SELECT ON activity_types TO archivist;
GRANT INSERT ON clients TO archivist;
GRANT SELECT ON clients TO archivist;
GRANT SELECT (date) ON activities TO archivist;
GRANT INSERT ON activities TO archivist;
GRANT DELETE ON activities TO archivist;
GRANT SELECT ON ping_requests TO archivist;
GRANT INSERT ON ping_requests TO archivist;
GRANT SELECT (batch, request, from_group, id) ON ping_stats TO archivist;
GRANT DELETE ON ping_stats TO archivist;
GRANT INSERT ON ping_stats TO archivist;
GRANT ALL ON ping_stat_id TO archivist;
GRANT INSERT ON ping_ips TO archivist;
GRANT INSERT ON cert_requests TO archivist;
GRANT SELECT ON cert_requests TO archivist;
GRANT INSERT ON cert_histograms TO archivist;
GRANT DELETE ON cert_histograms TO archivist;
GRANT SELECT (batch, id) ON cert_histograms TO archivist;
GRANT SELECT (timestamp) ON bandwidth TO archivist;
GRANT INSERT ON bandwidth TO archivist;
GRANT SELECT (timestamp) ON bandwidth_avg TO archivist;
GRANT INSERT ON bandwidth_avg TO archivist;
GRANT INSERT ON bandwidth_sums TO archivist;
GRANT INSERT ON biflows TO archivist;
GRANT SELECT (id, tagged_on) ON biflows TO archivist;
GRANT INSERT ON biflow_groups TO archivist;
GRANT ALL ON biflow_ids TO archivist;
GRANT SELECT (batch) ON nat_counts TO archivist;
GRANT INSERT ON nat_counts TO archivist;
GRANT DELETE ON nat_counts TO archivist;
GRANT SELECT (batch) ON spoof_counts TO archivist;
GRANT DELETE ON spoof_counts TO archivist;
GRANT INSERT ON spoof_counts TO archivist;
GRANT INSERT ON refused_addrs TO archivist;
GRANT INSERT ON refused_clients TO archivist;
GRANT DELETE ON refused_addrs TO archivist;
GRANT DELETE ON refused_clients TO archivist;
GRANT SELECT (since) ON refused_addrs TO archivist;
GRANT SELECT (since) ON refused_clients TO archivist;
GRANT INSERT ON fake_attackers TO archivist;
GRANT INSERT ON fake_server_activity TO archivist;
GRANT INSERT ON fake_passwords TO archivist;
GRANT SELECT (date) ON fake_attackers TO archivist;
GRANT SELECT (date) ON fake_server_activity TO archivist;
GRANT SELECT (timestamp) ON fake_passwords TO archivist;
GRANT DELETE ON fake_attackers TO archivist;
GRANT DELETE ON fake_server_activity TO archivist;
GRANT DELETE ON fake_passwords TO archivist;
GRANT INSERT ON ssh_sessions TO archivist;
GRANT SELECT ON ssh_sessions TO archivist;
GRANT UPDATE ON ssh_sessions TO archivist;
GRANT INSERT ON ssh_commands TO archivist;
GRANT ALL ON ssh_session_ids TO archivist;

COMMIT;
END_SQL
