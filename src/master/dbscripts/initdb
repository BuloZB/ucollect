#!/bin/sh

. ./dbconfig

psql -U "$DBADMIN" -d "$DB" $DBPARAMS <<ENDSQL
BEGIN;

DROP VIEW IF EXISTS fake_bad_connections;
DROP VIEW IF EXISTS fake_bad_connections_telnet;
DROP VIEW IF EXISTS fake_blacklist;
DROP VIEW IF EXISTS plugin_activities;
DROP MATERIALIZED VIEW IF EXISTS fake_blacklist_cache;
DROP TABLE IF EXISTS fake_logs;
DROP TABLE IF EXISTS fake_server_names;
DROP TABLE IF EXISTS fake_blacklist_limits;
DROP TABLE IF EXISTS fake_blacklist_scores;
DROP TABLE IF EXISTS known_plugins;
DROP TABLE IF EXISTS active_plugins;
DROP TABLE IF EXISTS ssh_commands;
DROP TABLE IF EXISTS ssh_sessions;
DROP TABLE IF EXISTS refused;
DROP TABLE IF EXISTS spoof;
DROP TABLE IF EXISTS nats;
DROP TABLE IF EXISTS biflows;
DROP TABLE IF EXISTS flow_filters;
DROP TABLE IF EXISTS capture_stats;
DROP TABLE IF EXISTS counts;
DROP TABLE IF EXISTS count_types;
DROP TABLE IF EXISTS count_snapshots;
DROP TABLE IF EXISTS bandwidth;
DROP TABLE IF EXISTS bandwidth_stats;
DROP TABLE IF EXISTS bandwidth_stats_dbg;
DROP TABLE IF EXISTS activities;
DROP TABLE IF EXISTS activity_types;
DROP TABLE IF EXISTS anomalies;
DROP TABLE IF EXISTS anomaly_types;
DROP TABLE IF EXISTS group_members;
DROP TABLE IF EXISTS groups;
DROP TABLE IF EXISTS pings;
DROP TABLE IF EXISTS ping_requests;
DROP TABLE IF EXISTS cert_chains;
DROP TABLE IF EXISTS certs;
DROP TABLE IF EXISTS cert_requests;
DROP TABLE IF EXISTS starttls_protos;
DROP TABLE IF EXISTS clients;
DROP TABLE IF EXISTS config;
DROP TYPE IF EXISTS fake_log_type;
DROP TYPE IF EXISTS fake_server;
DROP TYPE IF EXISTS blacklist_mode;
DROP TYPE IF EXISTS plugin_status;

CREATE TABLE clients (
	id INT PRIMARY KEY NOT NULL,
	name TEXT UNIQUE NOT NULL,
	passwd TEXT NOT NULL,
	mechanism CHAR NOT NULL DEFAULT 'A',
	builtin_passwd TEXT,
	slot_id SMALLINT,
	tag TEXT,
	devel_note TEXT,
	asnum INT
);
CREATE SEQUENCE clients_id OWNED BY clients.id;
ALTER TABLE clients ALTER COLUMN id SET DEFAULT NEXTVAL('clients_id');
CREATE TABLE activity_types (
	id SMALLINT PRIMARY KEY NOT NULL,
	name TEXT UNIQUE NOT NULL,
	plugin TEXT
);
CREATE SEQUENCE activity_types_ids OWNED BY activity_types.id;
ALTER TABLE activity_types ALTER COLUMN id SET DEFAULT NEXTVAL('activity_types_ids');
CREATE TABLE activities (
	id BIGINT NOT NULL PRIMARY KEY,
	client INT NOT NULL,
	timestamp TIMESTAMP NOT NULL,
	activity SMALLINT NOT NULL,
	FOREIGN KEY (client) REFERENCES clients(id),
	FOREIGN KEY (activity) REFERENCES activity_types(id)
);
CREATE INDEX ON activities (client, activity);
CREATE SEQUENCE activities_id OWNED BY activities.id;
ALTER TABLE activities ALTER COLUMN id SET DEFAULT NEXTVAL('activities_id');
CREATE TYPE plugin_status AS ENUM ('allowed', 'obsolete', 'disabled');
CREATE TABLE known_plugins (
	name TEXT NOT NULL,
	version INT,
	hash TEXT,
	status plugin_status NOT NULL DEFAULT 'allowed',
	introduced TIMESTAMP NOT NULL DEFAULT NOW(),
	note TEXT,
	UNIQUE(name, version, hash)
);
CREATE INDEX ON known_plugins(name);
CREATE TABLE active_plugins (
	client INT NOT NULL,
	name TEXT NOT NULL,
	updated TIMESTAMP NOT NULL,
	version INT NOT NULL,
	hash TEXT NOT NULL,
	libname TEXT NOT NULL,
	active BOOL NOT NULL,
	UNIQUE(client, name),
	FOREIGN KEY (client) REFERENCES clients(id)
);
CREATE OR REPLACE VIEW plugin_activity AS SELECT
	clients.name,
	MIN(globals.last) AS last,
	MIN(globals.login) AS login,
	ROUND(((EXTRACT(EPOCH FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC') - EXTRACT(EPOCH FROM MIN(globals.login))) / 60)::NUMERIC, 0) AS login_time,
	MIN(globals.logout) AS logout,
	ROUND(((EXTRACT(EPOCH FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC') - EXTRACT(EPOCH FROM MIN(globals.logout))) / 60)::NUMERIC, 0) AS logout_time,
	COALESCE(activity_types.plugin, active_plugins.name) AS plugin,
	ROUND(((EXTRACT(EPOCH FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC') - EXTRACT(EPOCH FROM MAX(activities.timestamp))) / 60)::NUMERIC, 0) AS plug_last,
	MIN(active_plugins.hash) AS hash,
	MIN(active_plugins.version) AS version,
	MIN(known_plugins.status) AS status,
	BOOL_AND(active_plugins.active) AS active
FROM
	(SELECT * FROM activities JOIN activity_types ON activities.activity = activity_types.id WHERE activity_types.name != 'firewall') AS activities
	JOIN activity_types ON activities.activity = activity_types.id
	FULL OUTER JOIN active_plugins ON active_plugins.client = activities.client AND active_plugins.name = activity_types.plugin
	LEFT OUTER JOIN known_plugins ON active_plugins.name = known_plugins.name AND active_plugins.version = COALESCE(known_plugins.version, active_plugins.version) AND active_plugins.hash = COALESCE(known_plugins.hash, active_plugins.hash)
	RIGHT OUTER JOIN clients ON clients.id = COALESCE(activities.client, active_plugins.client)
	LEFT OUTER JOIN (
		SELECT
			activities.client,
			ROUND(((EXTRACT(EPOCH FROM CURRENT_TIMESTAMP AT TIME ZONE 'UTC') - EXTRACT(EPOCH FROM MAX(activities.timestamp))) / 60)::NUMERIC, 0) AS last,
			MAX(CASE WHEN activity_types.name = 'login' THEN timestamp END) AS login,
			MAX(CASE WHEN activity_types.name = 'logout' THEN timestamp END) AS logout
		FROM
			activities
			JOIN activity_types ON activities.activity = activity_types.id
		WHERE
			activity_types.name != 'firewall'
		GROUP BY
			activities.client
	) AS globals ON clients.id = globals.client
WHERE
	activity_types.name IS NULL OR activity_types.plugin IS NOT NULL
GROUP BY
	clients.id,
	COALESCE(activity_types.plugin, active_plugins.name)
ORDER BY
	clients.name,
	COALESCE(activity_types.plugin, active_plugins.name);

CREATE TABLE groups (
	id INT PRIMARY KEY NOT NULL,
	name TEXT UNIQUE NOT NULL
);
CREATE SEQUENCE groups_id OWNED BY groups.id;
ALTER TABLE groups ALTER COLUMN id SET DEFAULT NEXTVAL('groups_id');
CREATE TABLE group_members (
	client INT NOT NULL,
	in_group INT NOT NULL,
	UNIQUE (client, in_group),
	FOREIGN KEY (client) REFERENCES clients(id) ON DELETE CASCADE,
	FOREIGN KEY (in_group) REFERENCES groups(id) ON DELETE CASCADE
);
CREATE TABLE anomaly_types (
	code CHAR PRIMARY KEY NOT NULL,
	description TEXT NOT NULL
);
CREATE TABLE anomalies (
	id BIGINT NOT NULL PRIMARY KEY,
	from_group INT NOT NULL,
	type CHAR NOT NULL,
	timestamp TIMESTAMP NOT NULL,
	value TEXT NOT NULL,
	relevance_count SMALLINT NOT NULL,
	relevance_of SMALLINT NOT NULL,
	strength REAL DEFAULT 0,
	country VARCHAR(2),
	FOREIGN KEY (from_group) REFERENCES groups(id) ON DELETE CASCADE,
	FOREIGN KEY (type) REFERENCES anomaly_types(code),
	CHECK(relevance_count <= relevance_of)
);
CREATE INDEX ON anomalies (from_group, type, timestamp);
CREATE SEQUENCE anomaly_ids OWNED BY anomalies.id;
ALTER TABLE anomalies ALTER COLUMN id SET DEFAULT NEXTVAL('anomaly_ids');

CREATE TABLE count_types (
	id SMALLINT PRIMARY KEY NOT NULL,
	name TEXT UNIQUE NOT NULL,
	description TEXT NOT NULL,
	ord SMALLINT NOT NULL,
	UNIQUE (ord)
);
CREATE SEQUENCE count_types_id OWNED BY count_types.id;
ALTER TABLE count_types ALTER COLUMN id SET DEFAULT NEXTVAL('count_types_id');
CREATE TABLE count_snapshots (
	id BIGINT PRIMARY KEY NOT NULL,
	timestamp TIMESTAMP NOT NULL,
	client INT NOT NULL,
	FOREIGN KEY (client) REFERENCES clients(id),
	UNIQUE (timestamp, client)
);
CREATE SEQUENCE count_snapshots_id OWNED BY count_snapshots.id;
ALTER TABLE count_snapshots ALTER COLUMN id SET DEFAULT NEXTVAL('count_snapshots_id');
CREATE TABLE counts (
	snapshot BIGINT NOT NULL,
	type SMALLINT NOT NULL,
	count BIGINT NOT NULL,
	size BIGINT NOT NULL,
	FOREIGN KEY (snapshot) REFERENCES count_snapshots(id) ON DELETE CASCADE,
	FOREIGN KEY (type) REFERENCES count_types(id),
	CHECK(count >= 0),
	CHECK(size >= 0),
	UNIQUE (snapshot, type)
);
CREATE TABLE bandwidth (
	timestamp TIMESTAMP NOT NULL,
	client INT NOT NULL,
	win_len INT NOT NULL,
	in_max BIGINT NOT NULL,
	out_max BIGINT NOT NULL,
	FOREIGN KEY (client) REFERENCES clients(id) ON DELETE CASCADE,
	PRIMARY KEY (timestamp, client, win_len)
);
CREATE TABLE bandwidth_stats (
	timestamp TIMESTAMP NOT NULL,
	client INT NOT NULL,
	in_time INT[] NOT NULL,
	in_bytes BIGINT[] NOT NULL,
	out_time INT[] NOT NULL,
	out_bytes BIGINT[] NOT NULL,
	FOREIGN KEY (client) REFERENCES clients(id) ON DELETE CASCADE,
	PRIMARY KEY (timestamp, client)
);
CREATE TABLE bandwidth_stats_dbg (
	timestamp TIMESTAMP NOT NULL,
	timestamp_dbg INT,
	client INT NOT NULL,
	in_time INT[] NOT NULL,
	in_bytes BIGINT[] NOT NULL,
	out_time INT[] NOT NULL,
	out_bytes BIGINT[] NOT NULL,
	FOREIGN KEY (client) REFERENCES clients(id) ON DELETE CASCADE,
	PRIMARY KEY (timestamp, client)
);
CREATE TABLE capture_stats (
	snapshot BIGINT NOT NULL,
	interface SMALLINT NOT NULL,
	captured INT NOT NULL,
	dropped INT NOT NULL,
	dropped_driver INT NOT NULL,
	FOREIGN KEY (snapshot) REFERENCES count_snapshots(id) ON DELETE CASCADE,
	CHECK(interface >= 0),
	CHECK(captured >= 0),
	CHECK(dropped >= 0),
	CHECK(dropped_driver >= 0),
	UNIQUE(snapshot, interface)
);
CREATE TABLE ping_requests (
	id INT PRIMARY KEY NOT NULL,
	host TEXT NOT NULL,
	proto CHAR(1) NOT NULL,
	amount SMALLINT NOT NULL,
	size SMALLINT NOT NULL,
	active BOOLEAN NOT NULL,
	lastrun TIMESTAMP NOT NULL DEFAULT TO_TIMESTAMP(0),
	interval INTERVAL NOT NULL DEFAULT '6 hours',
	UNIQUE(host, proto, amount, size)
);
CREATE SEQUENCE ping_requests_id OWNED BY ping_requests.id;
ALTER TABLE ping_requests ALTER COLUMN id SET DEFAULT NEXTVAL('ping_requests_id');

CREATE TABLE pings (
	request INT NOT NULL,
	batch TIMESTAMP NOT NULL,
	client INT NOT NULL,
	timestamp TIMESTAMP NOT NULL,
	ip TEXT,
	received SMALLINT NOT NULL,
	min INT,
	max INT,
	avg INT,
	UNIQUE (request, batch, client),
	FOREIGN KEY (request) REFERENCES ping_requests(id),
	FOREIGN KEY (client) REFERENCES clients(id),
	CHECK(min <= max),
	CHECK(min <= avg),
	CHECK(avg <= max)
);

CREATE TABLE biflows (
	id BIGINT PRIMARY KEY NOT NULL,
	client INT NOT NULL,
	ip_local INET NOT NULL,
	ip_remote INET NOT NULL,
	port_local INT NOT NULL,
	port_remote INT NOT NULL,
	proto CHAR(1) NOT NULL,
	start_in TIMESTAMP,
	start_out TIMESTAMP,
	stop_in TIMESTAMP,
	stop_out TIMESTAMP,
	size_in BIGINT NOT NULL,
	size_out BIGINT NOT NULL,
	count_in INT NOT NULL,
	count_out INT NOT NULL,
	seen_start_in BOOL NOT NULL,
	seen_start_out BOOL NOT NULL,
	tag TEXT,
	tagged_on TIMESTAMP,
	country_remote VARCHAR(2),
	FOREIGN KEY (client) REFERENCES clients(id),
	CHECK(proto = 'T' OR proto = 'U'),
	CHECK(start_in <= stop_in),
	CHECK(start_out <= stop_out),
	CHECK((start_in IS NOT NULL AND stop_in IS NOT NULL) OR (start_out IS NOT NULL AND stop_out IS NOT NULL))
);
CREATE SEQUENCE biflow_ids OWNED BY biflows.id;
ALTER TABLE biflows ALTER COLUMN id SET DEFAULT NEXTVAL('biflow_ids');
CREATE INDEX ON biflows (ip_remote);
CREATE INDEX ON biflows (tag);
CREATE INDEX ON biflows (tagged_on);
CREATE INDEX ON biflows (client);
CREATE INDEX ON biflows (port_remote, proto);
CREATE INDEX ON biflows (country_remote) WHERE country_remote IS NULL;

INSERT INTO activity_types (name, plugin) VALUES ('login', NULL), ('logout', NULL), ('buckets', 'Buckets'), ('counts', 'Count'), ('pings', 'Sniff'), ('bandwidth', 'Bandwidth'), ('certs', 'Sniff'), ('flow', 'Flow'), ('nat', 'Sniff'), ('spoof', 'Spoof'), ('refused', 'Refused'), ('fake', 'Fake');
CREATE TABLE starttls_protos (
	id SMALLINT NOT NULL PRIMARY KEY,
	name TEXT NOT NULL,
	UNIQUE(name)
);
CREATE TABLE cert_requests (
	id INT NOT NULL PRIMARY KEY,
	host TEXT NOT NULL,
	port SMALLINT NOT NULL,
	starttls SMALLINT NOT NULL DEFAULT 0,
	active BOOL NOT NULL DEFAULT true,
	want_cert BOOL NOT NULL DEFAULT false,
	want_chain BOOL NOT NULL DEFAULT false,
	want_details BOOL NOT NULL DEFAULT true,
	want_params BOOL NOT NULL DEFAULT true,
	lastrun TIMESTAMP NOT NULL DEFAULT TO_TIMESTAMP(0),
	interval INTERVAL NOT NULL DEFAULT '1 day',
	FOREIGN KEY (starttls) REFERENCES starttls_protos(id)
);
CREATE SEQUENCE cert_requests_id OWNED BY cert_requests.id;
ALTER TABLE cert_requests ALTER COLUMN id SET DEFAULT NEXTVAL('cert_requests_id');
CREATE TABLE certs (
	id INT NOT NULL PRIMARY KEY,
	request INT NOT NULL,
	client INT NOT NULL,
	batch TIMESTAMP NOT NULL,
	timestamp TIMESTAMP NOT NULL,
	proto TEXT,
	cipher TEXT,
	FOREIGN KEY (request) REFERENCES cert_requests(id),
	FOREIGN KEY (client) REFERENCES clients(id),
	UNIQUE(request, client, batch)
);
CREATE SEQUENCE certs_id OWNED BY certs.id;
ALTER TABLE certs ALTER COLUMN id SET DEFAULT NEXTVAL('certs_id');
CREATE TABLE cert_chains (
	cert INT NOT NULL,
	ord SMALLINT NOT NULL,
	is_full BOOL NOT NULL,
	value TEXT NOT NULL,
	name TEXT,
	expiry TIMESTAMP,
	FOREIGN KEY (cert) REFERENCES certs(id) ON DELETE CASCADE,
	UNIQUE(cert, ord)
);

INSERT INTO anomaly_types (code, description) VALUES ('I', 'Remote IP address'), ('P', 'Remote port'), ('B', 'Remote IP address and port'), ('L', 'Remote IP address and local port'), ('i', 'Remote IP address of outbound packets'), ('p', 'Remote port of outbound packets'), ('b', 'Remote IP address and port of outbound packets'), ('l', 'Remote IP address and local port of outbound packets');
INSERT INTO count_types (name, description, ord) VALUES
	('All', 'Any packet is included in this category', 1),
	('IPv4', 'Packets sent over the IPv4 protocol.', 2),
	('IPv6', 'Packets sent over the IPv6 protocol.', 3),
	('In', 'Packets sent over either IPv4 or IPv6 that have source address outside of the local network and destination inside.', 4),
	('Out', 'Packets sent over either IPv4 or IPv6 that have source address inside of the local network and destination outside.', 5),
	('TCP', 'Packets sent over IPv4/TCP and IPv6/TCP', 6),
	('UDP', 'Packets sent over IPv4/UDP and IPv6/UDP', 7),
	('ICMP', 'Both ICMP and ICMPv6 packets', 8),
	('Low port', 'TCP or UDP packets with the remote port <= 1024', 9),
	('SYN', 'TCP packets with the SYN flag set', 10),
	('FIN', 'TCP packets with the FIN flag set', 11),
	('SYN+ACK', 'TCP packets with both SYN and ACK flags set. This may be a good heuristics for number of created TCP connections.', 12),
	('ACK', 'TCP packets with ACK flag set.', 13),
	('PUSH', 'TCP packets with the PUSH flag set.', 14),
	('SERVER', 'Communication with the server', 15),
	('V6TUNNEL', 'Packets sent over IPv6-tunelled connectivity', 16);
INSERT INTO starttls_protos (id, name) VALUES (0, ''), (1, 'smtp'), (2, 'pop3'), (3, 'imap'), (4, 'ftp'), (5, 'xmpp');

CREATE TABLE nats (
	client INT NOT NULL,
	batch TIMESTAMP NOT NULL,
	nat_v4 BOOLEAN,
	nat_v6 BOOLEAN,
	FOREIGN KEY (client) REFERENCES clients(id),
	UNIQUE(client, batch)
);

CREATE TABLE config (
	plugin TEXT NOT NULL,
	name TEXT NOT NULL,
	value TEXT NOT NULL,
	UNIQUE(plugin, name)
);
INSERT INTO config (plugin, name, value) VALUES ('flow', 'max_flows', '5000'), ('flow', 'timeout', '1800000'), ('flow', 'minpackets', '5'), ('flow', 'version', '1'), ('flow', 'filter', '!(|(i(127.0.0.1,::1),I(127.0.0.1,::1)))'), ('flow', 'filter-diff', 'D(addresses)'), ('sniff', 'nat-interval', '3 days'), ('spoof', 'answer_timeout', '60'), ('spoof', 'dest_addr', 'api.turris.cz'), ('spoof', 'src_addr', '192.0.2.1'), ('spoof', 'interval', '1 day'), ('spoof', 'port', '5678');

CREATE TABLE flow_filters (
	filter TEXT NOT NULL,
	epoch INT NOT NULL,
	version INT NOT NULL,
	add BOOL NOT NULL,
	address TEXT NOT NULL,
	UNIQUE(filter, epoch, version, address)
);

CREATE TYPE fake_log_type AS ENUM ('connect', 'disconnect', 'lost', 'extra', 'timeout', 'login');
CREATE TYPE fake_server AS ENUM ('telnet');
CREATE TABLE fake_server_names (
	name TEXT NOT NULL,
	code CHAR NOT NULL,
	type fake_server NOT NULL,
	UNIQUE(name),
	UNIQUE(code),
	UNIQUE(type)
);
INSERT INTO fake_server_names (name, code, type) VALUES ('telnet', 'T', 'telnet');
CREATE TABLE fake_logs (
	client INT NOT NULL,
	timestamp TIMESTAMP NOT NULL,
	event fake_log_type NOT NULL,
	remote INET NOT NULL,
	local INET,
	remote_port INT,
	server fake_server NOT NULL,
	name TEXT,
	password TEXT,
	reason TEXT,
	FOREIGN KEY (client) REFERENCES clients(id)
);
CREATE INDEX fake_logs_server_idx ON fake_logs(server);
CREATE INDEX fake_logs_client_idx ON fake_logs(client);
CREATE INDEX fake_logs_compound_idx ON fake_logs(server, remote, client);
CREATE TABLE fake_blacklist_scores (
	server fake_server NOT NULL,
	event fake_log_type NOT NULL,
	score BIGINT NOT NULL,
	UNIQUE(server, event)
);
INSERT INTO fake_blacklist_scores (server, event, score) VALUES
	('telnet', 'connect', 1),
	('telnet', 'login', 5);
CREATE TYPE blacklist_mode AS ENUM ('soft', 'hard');
CREATE TABLE fake_blacklist_limits (
	server fake_server NOT NULL,
	client_pass BIGINT NOT NULL,
	score_total BIGINT NOT NULL,
	clients_total INT NOT NULL,
	score_passed BIGINT NOT NULL,
	clients_passed INT NOT NULL,
	mode blacklist_mode NOT NULL
);
CREATE INDEX fake_blacklist_limit_sc_idx ON fake_blacklist_limits (server, client_pass);
CREATE INDEX fake_blacklist_limit_s_idx ON fake_blacklist_limits (server);
INSERT INTO fake_blacklist_limits (server, client_pass, score_total, clients_total, score_passed, clients_passed, mode) VALUES
	('telnet', 25, 100, 0, 0, 3, 'hard'),
	('telnet', 25, 75, 0, 0, 2, 'soft'),
	('telnet', 200, 0, 0, 0, 1, 'soft');
CREATE MATERIALIZED VIEW fake_blacklist_cache AS SELECT
	fl.server,
	fl.remote,
	fl.client,
	SUM(fake_blacklist_scores.score) AS score,
	MAX(fl.timestamp) AS timestamp
FROM
	(SELECT * FROM fake_logs WHERE timestamp < CURRENT_TIMESTAMP AT TIME ZONE 'UTC' - INTERVAL '1 hour') AS fl
	JOIN fake_blacklist_scores ON fl.server = fake_blacklist_scores.server AND fl.event = fake_blacklist_scores.event
GROUP BY fl.server, fl.remote, fl.client;
CREATE OR REPLACE VIEW fake_blacklist AS SELECT
	t.server,
	t.remote,
	MAX(t.clients_total) AS clients_total,
	MAX(t.score_total) AS score_total,
	MAX(l.mode) AS mode
FROM
	(SELECT
		s.server,
		s.remote,
		s.client_pass,
		COUNT(s.client) AS clients_total,
		SUM(s.passed) AS clients_passed,
		SUM(s.score) AS score_total,
		SUM(s.score * s.passed) AS score_passed
	FROM (
		SELECT
			fl.server,
			fl.remote,
			fl.client,
			fake_blacklist_limits.client_pass,
			SUM(fl.score) AS score,
			(SUM(fl.score) >= fake_blacklist_limits.client_pass)::INTEGER AS passed
		FROM
			(SELECT * FROM fake_blacklist_cache
			UNION ALL
			SELECT
				fl.server,
				fl.remote,
				fl.client,
				SUM(fake_blacklist_scores.score) AS score,
				MAX(fl.timestamp) AS timestamp
			FROM (SELECT * FROM fake_logs WHERE timestamp > (SELECT MAX(timestamp) FROM fake_blacklist_cache)) AS fl
			JOIN fake_blacklist_scores ON fl.server = fake_blacklist_scores.server AND fl.event = fake_blacklist_scores.event
			GROUP BY fl.server, fl.remote, fl.client) AS fl
		JOIN fake_blacklist_limits ON fl.server = fake_blacklist_limits.server
		GROUP BY fl.server, fl.remote, fl.client, fake_blacklist_limits.client_pass
	) AS s
	GROUP BY
		s.server,
		s.remote,
		s.client_pass
	) AS t
JOIN fake_blacklist_limits AS l ON t.server = l.server AND t.client_pass = l.client_pass
WHERE
	t.clients_total >= l.clients_total
	AND t.clients_passed >= l.clients_passed
	AND t.score_total >= l.score_total
	AND t.score_passed >= l.score_passed
GROUP BY t.server, t.remote
ORDER BY t.server, t.remote;
CREATE OR REPLACE VIEW fake_bad_connections_telnet AS SELECT
	fake_logs.server,
	fake_logs.remote,
	remote_port,
	local,
	23 AS local_port,
	MIN(timestamp) AS start_time_utc,
	MAX(timestamp) AS end_time_utc,
	SUM((event = 'login')::INTEGER) AS login_attempts,
	MIN(clients_total) AS clients_total
FROM
	fake_logs
	JOIN fake_blacklist ON fake_logs.remote = fake_blacklist.remote
WHERE
	fake_logs.server = 'telnet'
	AND fake_blacklist.server = 'telnet'
	AND fake_blacklist.mode = 'hard'
	AND remote_port IS NOT NULL
GROUP BY
	fake_logs.server,
	fake_logs.remote,
	remote_port,
	local
ORDER BY
	fake_logs.remote,
	local,
	MIN(timestamp);
CREATE OR REPLACE VIEW fake_bad_connections AS SELECT * FROM fake_bad_connections_telnet;

CREATE TABLE spoof (
	client INT NOT NULL,
	batch TIMESTAMP NOT NULL,
	spoofed BOOLEAN NOT NULL,
	addr_matches BOOLEAN NOT NULL,
	received TIMESTAMP,
	ip INET,
	FOREIGN KEY (client) REFERENCES clients(id)
);

CREATE TABLE refused (
	id BIGINT NOT NULL PRIMARY KEY,
	client INT NOT NULL,
	timestamp TIMESTAMP NOT NULL,
	address INET NOT NULL,
	local_port INT NOT NULL,
	remote_port INT NOT NULL,
	reason CHAR NOT NULL,
	FOREIGN KEY (client) REFERENCES clients(id)
);
CREATE SEQUENCE refused_ids OWNED BY refused.id;
ALTER TABLE refused ALTER COLUMN id SET DEFAULT NEXTVAL('refused_ids');

CREATE TABLE ssh_sessions (
	id INT NOT NULL PRIMARY KEY,
	long_id CHAR(32) NOT NULL,
	client_id INT NOT NULL REFERENCES clients(id) ON DELETE CASCADE,
	start_time TIMESTAMP WITH TIME ZONE NOT NULL,
	end_time TIMESTAMP WITH TIME ZONE DEFAULT NULL,
	login TEXT NOT NULL,
	password TEXT NOT NULL,
	remote INET NOT NULL
);
CREATE SEQUENCE ssh_session_ids OWNED BY ssh_sessions.id;
ALTER TABLE ssh_sessions ALTER COLUMN id SET DEFAULT NEXTVAL('ssh_session_ids');
CREATE INDEX ssh_sessions_long_id_idx ON ssh_sessions (long_id);

CREATE TABLE ssh_commands (
	id SERIAL PRIMARY KEY,
	session_id INTEGER NOT NULL REFERENCES ssh_sessions(id) ON DELETE CASCADE,
	ts TIMESTAMP WITH TIME ZONE NOT NULL,
	success BOOLEAN NOT NULL,
	command TEXT NOT NULL,
	archived BOOL NOT NULL DEFAULT false
);

GRANT SELECT (id, name) ON clients TO $DBUPDATER;
GRANT SELECT ON activity_types TO $DBUPDATER;
GRANT INSERT ON activities TO $DBUPDATER;
GRANT UPDATE ON SEQUENCE activities_id TO $DBUPDATER;
GRANT SELECT ON SEQUENCE activities_id TO $DBUPDATER;
GRANT SELECT ON groups TO $DBUPDATER;
GRANT SELECT ON group_members TO $DBUPDATER;
GRANT SELECT ON anomaly_types TO $DBUPDATER;
GRANT INSERT ON anomalies TO $DBUPDATER;
GRANT ALL ON anomaly_ids TO $DBUPDATER;
GRANT SELECT ON count_types TO $DBUPDATER;
GRANT INSERT ON count_snapshots TO $DBUPDATER;
GRANT SELECT ON count_snapshots TO $DBUPDATER;
GRANT INSERT ON bandwidth TO $DBUPDATER;
GRANT SELECT ON bandwidth_stats TO $DBUPDATER;
GRANT INSERT ON bandwidth_stats TO $DBUPDATER;
GRANT UPDATE ON bandwidth_stats TO $DBUPDATER;
GRANT INSERT ON bandwidth_stats_dbg TO $DBUPDATER;
GRANT SELECT ON SEQUENCE count_snapshots_id TO $DBUPDATER;
GRANT UPDATE ON SEQUENCE count_snapshots_id TO $DBUPDATER;
GRANT INSERT ON counts TO $DBUPDATER;
GRANT INSERT ON capture_stats TO $DBUPDATER;
GRANT INSERT ON pings TO $DBUPDATER;
GRANT SELECT ON ping_requests TO $DBUPDATER;
GRANT UPDATE (lastrun) ON ping_requests TO $DBUPDATER;
GRANT SELECT ON cert_requests TO $DBUPDATER;
GRANT UPDATE (lastrun) ON cert_requests TO $DBUPDATER;
GRANT ALL ON certs_id TO $DBUPDATER;
GRANT INSERT ON certs TO $DBUPDATER;
GRANT INSERT ON cert_chains TO $DBUPDATER;
GRANT SELECT ON certs TO $DBUPDATER;
GRANT INSERT ON biflows TO $DBUPDATER;
GRANT ALL ON biflow_ids TO $DBUPDATER;
GRANT INSERT ON nats TO $DBUPDATER;
GRANT SELECT (batch) ON nats TO $DBUPDATER;
GRANT SELECT ON config TO $DBUPDATER;
GRANT SELECT ON flow_filters TO $DBUPDATER;
GRANT SELECT ON fake_server_names TO $DBUPDATER;
GRANT INSERT ON fake_logs TO $DBUPDATER;
GRANT SELECT ON flow_filters to $DBUPDATER;
GRANT SELECT (batch) ON spoof TO $DBUPDATER;
GRANT INSERT ON spoof TO $DBUPDATER;
GRANT INSERT ON refused TO $DBUPDATER;
GRANT SELECT ON known_plugins TO $DBUPDATER;
GRANT DELETE ON active_plugins TO $DBUPDATER;
GRANT INSERT ON active_plugins TO $DBUPDATER;
GRANT SELECT ON active_plugins TO $DBUPDATER;

GRANT SELECT (name, passwd, mechanism, builtin_passwd, slot_id) ON clients TO $DBAUTHENTICATOR;

GRANT SELECT (tag) ON clients TO $DBJENKINS;
GRANT UPDATE (builtin_passwd) ON clients TO $DBJENKINS;
GRANT INSERT ON known_plugins to $DBJENKINS;
GRANT SELECT ON known_plugins TO $DBJENKINS;

GRANT SELECT (timestamp) ON activities TO $DBCLEANER;
GRANT SELECT (timestamp) ON anomalies TO $DBCLEANER;
GRANT SELECT (timestamp) ON count_snapshots TO $DBCLEANER;
GRANT SELECT (timestamp) ON bandwidth to $DBCLEANER;
GRANT SELECT (timestamp) ON bandwidth_stats to $DBCLEANER;
GRANT SELECT (timestamp) ON bandwidth_stats_dbg to $DBCLEANER;
GRANT SELECT (batch) ON pings TO $DBCLEANER;
GRANT SELECT (batch, id) ON certs TO $DBCLEANER;
GRANT SELECT (cert) ON cert_chains TO $DBCLEANER;
GRANT SELECT (start_in, start_out) ON biflows TO $DBCLEANER;
GRANT SELECT (batch) ON nats TO $DBCLEANER;
GRANT SELECT (timestamp) ON fake_logs TO $DBCLEANER;
GRANT SELECT (batch) ON spoof TO $DBCLEANER;
GRANT SELECT (timestamp) ON refused TO $DBCLEANER;
GRANT SELECT (start_time, id) ON ssh_sessions TO $DBCLEANER;
GRANT SELECT (session_id) ON ssh_commands TO $DBCLEANER;
GRANT DELETE ON activities to $DBCLEANER;
GRANT DELETE ON anomalies TO $DBCLEANER;
GRANT DELETE ON count_snapshots TO $DBCLEANER;
GRANT DELETE ON bandwidth to $DBCLEANER;
GRANT DELETE ON bandwidth_stats TO $DBCLEANER;
GRANT DELETE ON bandwidth_stats_dbg TO $DBCLEANER;
GRANT DELETE ON pings TO $DBCLEANER;
GRANT DELETE ON certs TO $DBCLEANER;
GRANT DELETE ON cert_chains TO $DBCLEANER;
GRANT DELETE ON biflows TO $DBCLEANER;
GRANT DELETE ON nats TO $DBCLEANER;
GRANT DELETE ON fake_logs TO $DBCLEANER;
GRANT DELETE ON spoof TO $DBCLEANER;
GRANT DELETE ON refused TO $DBCLEANER;
GRANT DELETE ON ssh_sessions TO $DBCLEANER;
GRANT DELETE ON ssh_commands TO $DBCLEANER;
GRANT SELECT ON fake_logs TO $DBCLEANER;

GRANT SELECT ON groups TO $DBARCHIVIST;
GRANT SELECT ON count_types TO $DBARCHIVIST;
GRANT SELECT ON anomaly_types TO $DBARCHIVIST;
GRANT SELECT ON activity_types TO $DBARCHIVIST;
GRANT SELECT ON activities TO $DBARCHIVIST;
GRANT SELECT (id, name) ON clients TO $DBARCHIVIST;
GRANT SELECT (from_group, type, timestamp, value, value, relevance_count, relevance_of, strength) ON anomalies TO $DBARCHIVIST;
GRANT SELECT ON counts TO $DBARCHIVIST;
GRANT SELECT ON count_snapshots TO $DBARCHIVIST;
GRANT SELECT ON group_members TO $DBARCHIVIST;
GRANT SELECT ON pings TO $DBARCHIVIST;
GRANT SELECT ON ping_requests TO $DBARCHIVIST;
GRANT SELECT ON cert_requests TO $DBARCHIVIST;
GRANT SELECT ON certs TO $DBARCHIVIST;
GRANT SELECT ON cert_chains TO $DBARCHIVIST;
GRANT SELECT ON biflows TO $DBARCHIVIST;
GRANT SELECT ON bandwidth TO $DBARCHIVIST;
GRANT SELECT ON bandwidth_stats TO $DBARCHIVIST;
GRANT SELECT ON nats TO $DBARCHIVIST;
GRANT SELECT ON fake_logs TO $DBARCHIVIST;
GRANT SELECT ON spoof TO $DBARCHIVIST;
GRANT SELECT ON refused TO $DBARCHIVIST;
GRANT SELECT ON fake_logs TO $DBARCHIVIST;
GRANT SELECT ON ssh_sessions TO $DBARCHIVIST;
GRANT SELECT ON ssh_commands TO $DBARCHIVIST;
GRANT UPDATE (archived) ON ssh_commands TO $DBARCHIVIST;

GRANT SELECT ON biflows TO $DBFLOWTAGGER;
GRANT UPDATE (tag, tagged_on) ON biflows TO $DBFLOWTAGGER;
GRANT SELECT (value, type) ON anomalies TO $DBFLOWTAGGER;
GRANT SELECT ON config TO $DBFLOWTAGGER;
GRANT UPDATE ON config TO $DBFLOWTAGGER;
GRANT SELECT ON flow_filters TO $DBFLOWTAGGER;
GRANT INSERT ON flow_filters TO $DBFLOWTAGGER;
GRANT SELECT ON fake_blacklist TO $DBFLOWTAGGER;

GRANT INSERT ON ssh_sessions TO $DBKIPPO;
GRANT INSERT ON ssh_commands TO $DBKIPPO;
GRANT UPDATE ON ssh_sessions TO $DBKIPPO;
GRANT UPDATE ON ssh_commands TO $DBKIPPO;
GRANT SELECT ON ssh_sessions TO $DBKIPPO;
GRANT SELECT ON ssh_commands TO $DBKIPPO;
GRANT ALL ON ssh_session_ids TO $DBKIPPO;

COMMIT;
ENDSQL

if [ "$1" = "debug" ] ; then
	# Provide some debug data (clients for now)
	psql -U "$DBADMIN" -d "$DB" $DBPARAMS <<'ENDSQL'
BEGIN;
INSERT INTO clients (name, mechanism, passwd) VALUES ('ruth', 'Y', 'None'), ('0000000100000001', 'Y', 'None');

INSERT INTO groups (name) VALUES ('all'), ('ruth');
INSERT INTO group_members (client, in_group) SELECT clients.id, groups.id FROM clients CROSS JOIN groups WHERE groups.name = 'all';
INSERT INTO group_members (client, in_group) SELECT clients.id, groups.id FROM clients JOIN groups ON groups.name = clients.name;
INSERT INTO ping_requests (host, proto, amount, size, active) VALUES ('turris.cz', '6', 5, 100, TRUE), ('turris.cz', '4', 5, 100, TRUE), ('8.8.8.8', 'X', 3, 64, TRUE);
INSERT INTO known_plugins (name) VALUES ('Count'), ('Bandwidth'), ('Fake'), ('Flow'), ('Refused'), ('Sniff'), ('Spoof');
COMMIT;
ENDSQL
else

	psql -U "$DBADMIN" -d "$DB" $DBPARAMS <<ENDSQL
BEGIN;
GRANT SELECT (created_at) ON router_loggedpacket TO $DBCLEANER;
GRANT SELECT (date) ON router_registrationcode TO $DBCLEANER;
GRANT SELECT (id, router_id, time, remote_port, remote_address, local_port, direction, rule_id, protocol, count, archived, tcp_flags) ON router_loggedpacket TO $DBARCHIVIST;
GRANT DELETE ON router_loggedpacket TO $DBCLEANER;
GRANT DELETE ON router_registrationcode TO $DBCLEANER;
GRANT UPDATE (archived) ON router_loggedpacket TO $DBARCHIVIST;
GRANT SELECT (id, client_id) ON router_router TO $DBARCHIVIST;
COMMIT;
ENDSQL
fi
