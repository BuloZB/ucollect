#!/bin/sh

. ./dbconfig

psql -U "$DBADMIN" -d "$DB" $DBPARAMS <<ENDSQL
BEGIN;

DROP TABLE IF EXISTS capture_stats;
DROP TABLE IF EXISTS counts;
DROP TABLE IF EXISTS count_types;
DROP TABLE IF EXISTS count_snapshots;
DROP TABLE IF EXISTS activities;
DROP TABLE IF EXISTS activity_types;
DROP TABLE IF EXISTS anomalies;
DROP TABLE IF EXISTS anomaly_types;
DROP TABLE IF EXISTS group_members;
DROP TABLE IF EXISTS groups;
DROP TABLE IF EXISTS clients;

CREATE TABLE clients (
	id INT PRIMARY KEY NOT NULL,
	name TEXT UNIQUE NOT NULL,
	passwd TEXT NOT NULL,
	mechanism CHAR NOT NULL DEFAULT 'A',
	builtin_passwd TEXT,
	slot_id SMALLINT,
	tag TEXT
);
CREATE SEQUENCE clients_id OWNED BY clients.id;
ALTER TABLE clients ALTER COLUMN id SET DEFAULT NEXTVAL('clients_id');
CREATE TABLE activity_types (
	id SMALLINT PRIMARY KEY NOT NULL,
	name TEXT UNIQUE NOT NULL
);
CREATE SEQUENCE activity_types_ids OWNED BY activity_types.id;
ALTER TABLE activity_types ALTER COLUMN id SET DEFAULT NEXTVAL('activity_types_ids');
CREATE TABLE activities (
	client INT NOT NULL,
	timestamp TIMESTAMP NOT NULL,
	activity SMALLINT NOT NULL,
	FOREIGN KEY (client) REFERENCES clients(id),
	FOREIGN KEY (activity) REFERENCES activity_types(id)
);
CREATE INDEX ON activities (client, activity);

CREATE TABLE groups (
	id INT PRIMARY KEY NOT NULL,
	name TEXT UNIQUE NOT NULL
);
CREATE SEQUENCE groups_id OWNED BY groups.id;
ALTER TABLE groups ALTER COLUMN id SET DEFAULT NEXTVAL('groups_id');
CREATE TABLE group_members (
	client INT NOT NULL,
	in_group INT NOT NULL,
	UNIQUE (client, in_group),
	FOREIGN KEY (client) REFERENCES clients(id) ON DELETE CASCADE,
	FOREIGN KEY (in_group) REFERENCES groups(id) ON DELETE CASCADE
);
CREATE TABLE anomaly_types (
	code CHAR PRIMARY KEY NOT NULL,
	description TEXT NOT NULL
);
CREATE TABLE anomalies (
	from_group INT NOT NULL,
	type CHAR NOT NULL,
	timestamp TIMESTAMP NOT NULL,
	value TEXT NOT NULL,
	relevance_count SMALLINT NOT NULL,
	relevance_of SMALLINT NOT NULL,
	strength REAL DEFAULT 0,
	FOREIGN KEY (from_group) REFERENCES groups(id),
	FOREIGN KEY (type) REFERENCES anomaly_types(code),
	CHECK(relevance_count <= relevance_of)
);
CREATE INDEX ON anomalies (from_group, type, timestamp);

CREATE TABLE count_types (
	id SMALLINT PRIMARY KEY NOT NULL,
	name TEXT UNIQUE NOT NULL,
	description TEXT NOT NULL,
	ord SMALLINT NOT NULL,
	UNIQUE (ord)
);
CREATE SEQUENCE count_types_id OWNED BY count_types.id;
ALTER TABLE count_types ALTER COLUMN id SET DEFAULT NEXTVAL('count_types_id');
CREATE TABLE count_snapshots (
	id BIGINT PRIMARY KEY NOT NULL,
	timestamp TIMESTAMP NOT NULL,
	client INT NOT NULL,
	FOREIGN KEY (client) REFERENCES clients(id),
	UNIQUE (timestamp, client)
);
CREATE SEQUENCE count_snapshots_id OWNED BY count_snapshots.id;
ALTER TABLE count_snapshots ALTER COLUMN id SET DEFAULT NEXTVAL('count_snapshots_id');
CREATE TABLE counts (
	snapshot BIGINT NOT NULL,
	type SMALLINT NOT NULL,
	count INT NOT NULL,
	size INT NOT NULL,
	FOREIGN KEY (snapshot) REFERENCES count_snapshots(id) ON DELETE CASCADE,
	FOREIGN KEY (type) REFERENCES count_types(id),
	CHECK(count >= 0),
	CHECK(size >= 0),
	UNIQUE (snapshot, type)
);
CREATE TABLE capture_stats (
	snapshot BIGINT NOT NULL,
	interface SMALLINT NOT NULL,
	captured INT NOT NULL,
	dropped INT NOT NULL,
	dropped_driver INT NOT NULL,
	FOREIGN KEY (snapshot) REFERENCES count_snapshots(id) ON DELETE CASCADE,
	CHECK(interface >= 0),
	CHECK(captured >= 0),
	CHECK(dropped >= 0),
	CHECK(dropped_driver >= 0),
	UNIQUE(snapshot, interface)
);

INSERT INTO activity_types (name) VALUES ('login'), ('logout'), ('buckets'), ('counts');
INSERT INTO anomaly_types (code, description) VALUES ('I', 'Remote IP address'), ('P', 'Remote port'), ('B', 'Remote IP address and port');
INSERT INTO count_types (name, description, ord) VALUES
	('All', 'Any packet is included in this category', 1),
	('IPv4', 'Packets sent over the IPv4 protocol.', 2),
	('IPv6', 'Packets sent over the IPv6 protocol.', 3),
	('In', 'Packets sent over either IPv4 or IPv6 that have source address outside of the local network and destination inside.', 4),
	('Out', 'Packets sent over either IPv4 or IPv6 that have source address inside of the local network and destination outside.', 5),
	('TCP', 'Packets sent over IPv4/TCP and IPv6/TCP', 6),
	('UDP', 'Packets sent over IPv4/UDP and IPv6/UDP', 7),
	('ICMP', 'Both ICMP and ICMPv6 packets', 8),
	('Low port', 'TCP or UDP packets with the remote port <= 1024', 9),
	('SYN', 'TCP packets with the SYN flag set', 10),
	('FIN', 'TCP packets with the FIN flag set', 11),
	('SYN+ACK', 'TCP packets with both SYN and ACK flags set. This may be a good heuristics for number of created TCP connections.', 12),
	('ACK', 'TCP packets with ACK flag set.', 13),
	('PUSH', 'TCP packets with the PUSH flag set.', 14),
	('SERVER', 'Communication with the server', 15);

GRANT SELECT (id, name) ON clients TO $DBUPDATER;
GRANT SELECT ON activity_types TO $DBUPDATER;
GRANT INSERT ON activities TO $DBUPDATER;
GRANT SELECT ON groups TO $DBUPDATER;
GRANT SELECT ON group_members TO $DBUPDATER;
GRANT SELECT ON anomaly_types TO $DBUPDATER;
GRANT INSERT ON anomalies TO $DBUPDATER;
GRANT SELECT ON count_types TO $DBUPDATER;
GRANT INSERT ON count_snapshots TO $DBUPDATER;
GRANT SELECT ON count_snapshots TO $DBUPDATER;
GRANT SELECT ON SEQUENCE count_snapshots_id TO $DBUPDATER;
GRANT UPDATE ON SEQUENCE count_snapshots_id TO $DBUPDATER;
GRANT INSERT ON counts TO $DBUPDATER;
GRANT INSERT ON capture_stats TO $DBUPDATER;

GRANT SELECT (name, passwd, mechanism, builtin_passwd, slot_id) ON clients TO $DBAUTHENTICATOR;

GRANT SELECT (tag) ON clients TO $DBJENKINS;
GRANT UPDATE (builtin_passwd) ON clients TO $DBJENKINS;

GRANT SELECT (timestamp) ON activities TO $DBCLEANER;
GRANT SELECT (timestamp) ON anomalies TO $DBCLEANER;
GRANT SELECT (timestamp) ON count_snapshots TO $DBCLEANER;
GRANT DELETE ON activities to $DBCLEANER;
GRANT DELETE ON anomalies TO $DBCLEANER;
GRANT DELETE ON count_snapshots TO $DBCLEANER;

COMMIT;
ENDSQL

if [ "$1" = "debug" ] ; then
	# Provide some debug data (clients for now)
	psql -U "$DBADMIN" -d "$DB" $DBPARAMS <<'ENDSQL'
BEGIN;
INSERT INTO clients (name, passwd, mechanism) VALUES ('ruth', '123456', 'S'), ('dragonfly', '78910', 'S'), ('spider', 'web', 'S');

INSERT INTO groups (name) VALUES ('all'), ('ruth'), ('dragonfly'), ('spider');
INSERT INTO group_members (client, in_group) SELECT clients.id, groups.id FROM clients CROSS JOIN groups WHERE groups.name = 'all';
INSERT INTO group_members (client, in_group) SELECT clients.id, groups.id FROM clients JOIN groups ON groups.name = clients.name;
COMMIT;
ENDSQL
fi
