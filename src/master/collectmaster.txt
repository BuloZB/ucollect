The collection master
=====================

The collection master (`collectmaster`) is the server that listens for
the `ucollect` clients and gathers data from them, saving them to a
database (currently postgresql). It consists of a core and several plugins.
Generally, there's a matching plugin for each plugin in `ucollect`.

The core provides some basic features, like listening for the clients,
logging and connecting to the database.

Execution
---------

The server takes exactly one parameter, path to the configuration
file.

  ./collectmaster collect-master.conf

Dependencies
------------

* Python 2 (tested with 2.7)
* Twisted (http://www.twistedmatrix.com)
* PostgresSQL server
* PyGreSQL (pygresql.org)

Configuration
-------------

The configuration file is simple ini file (see
http://docs.python.org/2/library/configparser.html), the
`RawConfigParser`). There's one section for the core (called `main`)
and then a section for each plugin. Each plugin section is named by
the fully qualified class name of the plugin (for example
`buckets.main.BucketsPlugin`).

You can find a default configuration file in
`src/master/collect-master.conf`.

All the options are mandatory.

The `main` section
~~~~~~~~~~~~~~~~~~

There are option to configure the core of the collection master.

dbuser::
  User to connect to the database.
dbpasswd::
  Password to authenticate to the database.
db::
  The database name to use.
port::
  The TCP port to use for incoming `ucollect` connections. It listens
  on IPv6 wildcard address, if you need to restrict it to some
  interface or so, use firewall.
log_severity::
  The severity at which log. The values are (with growing severity):
  - TRACE
  - DEBUG
  - INFO
  - WARN
  - ERROR
  - CRITICAL
log_format::
  The format of log messages. Follows the format described at
  http://docs.python.org/2/library/logging.html.
log_file::
  If set to `-`, it logs to standard error output. If it is something
  else, it logs to the given file.

The `count` plugin
~~~~~~~~~~~~~~~~~~

It is in the `count_plugin.CountPlugin` class. There are only few
options, since it mostly stores the received data:

interval::
  Number of seconds between requests for data from clients are sent.
aggregate_delay::
  The request for data is sent. Then the plugin waits this amount of
  seconds. After the wait, what answers came are stored in the
  database as one snapshot. This must be less than interval, otherwise
  strange things will happen.

The database
------------

A postgresql database is used by the server.

There's a basic set of tables, and each plugin has it's own additional
set of tables.

The database can be initialized by the `initdb` shell script in the
`src/master/dbscripts' directory. It expects the user `ucollect`
exists and has access to the already-existing database `ucollect`. The
scripts creates the necessary tables (and wipes out the old ones if
already present).

Table marks
~~~~~~~~~~~

The tables are flagged to indicate how the server accesses them.

RO::
  Table is not modified by the server. The `SELECT` privilege is
  enough.
WO::
  Table is inserted into, but not read by the server. The `INSERT`
  privilege is enough.
SI::
  Table that is inserted into and selected from by the server. The
  server needs `SELECT` and `INSERT` privileges.

[NOTE]
The current script does not fine-tune permissions. Currently, the
server has full rights on the whole database.

Basic tables
~~~~~~~~~~~~

clients [RO]::
  This table holds existing clients and their login information. It is
  used mostly as reference points from other tables, when they relate
  to clients, but also when checking if a client can connect. This
  table is considered read only for the server.
activity_types [RO]::
  This holds recognized activities of clients. While others are
  expected to appear in future (with more plugins, for example), these
  are currently available:
  login;; Client connected and authenticated with the server.
  logout;; Client disconnected.
  buckets;; Activity on the buckets plugin (some data arrived).
  counts;; Activity on the counts plugin (some data arrived);
activities [WO]::
  This holds records of when each client performed which activity. The
  purpose is both debugging aids and detection of inactive/dead
  routers.

Tables of the `counts` plugin
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

count_types [RO]::
  List of packet properties being counted.
count_snapshots [SI]::
  A row is stored here for each time and client that sends data. It
  represents one snapshot of the counts.
counts [WO]::
  The actual statistics. Each row are counts for single snapshot and
  type, therefore there are multiple rows for each snapshot.
capture_stats [WO]::
  Statistics for number of captured and dropped packets on a given
  network interface in a given snapshot. There may be multiple
  interfaces in given snapshot.
